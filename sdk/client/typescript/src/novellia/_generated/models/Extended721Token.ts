/* tslint:disable */
/* eslint-disable */
/**
 * novellia
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.9.1
 * Contact: contact@rektangularstudios.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Extended721File,
    Extended721FileFromJSON,
    Extended721FileFromJSONTyped,
    Extended721FileToJSON,
    NativeToken,
    NativeTokenFromJSON,
    NativeTokenFromJSONTyped,
    NativeTokenToJSON,
} from './';

/**
 * Easily parsable data for Extended 721 Token
 * See: https://github.com/cardano-foundation/CIPs/pull/85#discussion_r629120254 for updated version
 * @export
 * @interface Extended721Token
 */
export interface Extended721Token {
    /**
     * 
     * @type {NativeToken}
     * @memberof Extended721Token
     */
    nativeToken?: NativeToken;
    /**
     * List of extensions for parser to understand feature set. This may be empty, in which case the token is interpreted as just a 721 token.
     * @type {Array<string>}
     * @memberof Extended721Token
     */
    extension?: Array<string>;
    /**
     * Token number in a set. Redundant field which makes no sense for tokens without a total-order.
     * @type {number}
     * @memberof Extended721Token
     */
    id: number;
    /**
     * Display name for token.
     * @type {string}
     * @memberof Extended721Token
     */
    name: string;
    /**
     * Image URL without source redundancy.
     * @type {string}
     * @memberof Extended721Token
     */
    image: string;
    /**
     * List of token's asset files
     * @type {Array<Extended721File>}
     * @memberof Extended721Token
     */
    files?: Array<Extended721File>;
    /**
     * MIME type of "image"
     * @type {string}
     * @memberof Extended721Token
     */
    mediaType?: string;
    /**
     * short token description
     * @type {string}
     * @memberof Extended721Token
     */
    description?: string;
}

export function Extended721TokenFromJSON(json: any): Extended721Token {
    return Extended721TokenFromJSONTyped(json, false);
}

export function Extended721TokenFromJSONTyped(json: any, ignoreDiscriminator: boolean): Extended721Token {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'nativeToken': !exists(json, 'native_token') ? undefined : NativeTokenFromJSON(json['native_token']),
        'extension': !exists(json, 'extension') ? undefined : json['extension'],
        'id': json['id'],
        'name': json['name'],
        'image': json['image'],
        'files': !exists(json, 'files') ? undefined : ((json['files'] as Array<any>).map(Extended721FileFromJSON)),
        'mediaType': !exists(json, 'mediaType') ? undefined : json['mediaType'],
        'description': !exists(json, 'description') ? undefined : json['description'],
    };
}

export function Extended721TokenToJSON(value?: Extended721Token | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'native_token': NativeTokenToJSON(value.nativeToken),
        'extension': value.extension,
        'id': value.id,
        'name': value.name,
        'image': value.image,
        'files': value.files === undefined ? undefined : ((value.files as Array<any>).map(Extended721FileToJSON)),
        'mediaType': value.mediaType,
        'description': value.description,
    };
}


