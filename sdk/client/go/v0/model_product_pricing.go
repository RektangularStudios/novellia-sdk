/*
 * novellia
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.8.0
 * Contact: contact@rektangularstudios.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package novellia

import (
	"encoding/json"
)

// ProductPricing struct for ProductPricing
type ProductPricing struct {
	PriceCurrencyId string `json:"price_currency_id"`
	PriceUnitAmount float32 `json:"price_unit_amount"`
	MaxOrderSize int32 `json:"max_order_size"`
}

// NewProductPricing instantiates a new ProductPricing object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProductPricing(priceCurrencyId string, priceUnitAmount float32, maxOrderSize int32, ) *ProductPricing {
	this := ProductPricing{}
	this.PriceCurrencyId = priceCurrencyId
	this.PriceUnitAmount = priceUnitAmount
	this.MaxOrderSize = maxOrderSize
	return &this
}

// NewProductPricingWithDefaults instantiates a new ProductPricing object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProductPricingWithDefaults() *ProductPricing {
	this := ProductPricing{}
	return &this
}

// GetPriceCurrencyId returns the PriceCurrencyId field value
func (o *ProductPricing) GetPriceCurrencyId() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.PriceCurrencyId
}

// GetPriceCurrencyIdOk returns a tuple with the PriceCurrencyId field value
// and a boolean to check if the value has been set.
func (o *ProductPricing) GetPriceCurrencyIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.PriceCurrencyId, true
}

// SetPriceCurrencyId sets field value
func (o *ProductPricing) SetPriceCurrencyId(v string) {
	o.PriceCurrencyId = v
}

// GetPriceUnitAmount returns the PriceUnitAmount field value
func (o *ProductPricing) GetPriceUnitAmount() float32 {
	if o == nil  {
		var ret float32
		return ret
	}

	return o.PriceUnitAmount
}

// GetPriceUnitAmountOk returns a tuple with the PriceUnitAmount field value
// and a boolean to check if the value has been set.
func (o *ProductPricing) GetPriceUnitAmountOk() (*float32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.PriceUnitAmount, true
}

// SetPriceUnitAmount sets field value
func (o *ProductPricing) SetPriceUnitAmount(v float32) {
	o.PriceUnitAmount = v
}

// GetMaxOrderSize returns the MaxOrderSize field value
func (o *ProductPricing) GetMaxOrderSize() int32 {
	if o == nil  {
		var ret int32
		return ret
	}

	return o.MaxOrderSize
}

// GetMaxOrderSizeOk returns a tuple with the MaxOrderSize field value
// and a boolean to check if the value has been set.
func (o *ProductPricing) GetMaxOrderSizeOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.MaxOrderSize, true
}

// SetMaxOrderSize sets field value
func (o *ProductPricing) SetMaxOrderSize(v int32) {
	o.MaxOrderSize = v
}

func (o ProductPricing) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["price_currency_id"] = o.PriceCurrencyId
	}
	if true {
		toSerialize["price_unit_amount"] = o.PriceUnitAmount
	}
	if true {
		toSerialize["max_order_size"] = o.MaxOrderSize
	}
	return json.Marshal(toSerialize)
}

type NullableProductPricing struct {
	value *ProductPricing
	isSet bool
}

func (v NullableProductPricing) Get() *ProductPricing {
	return v.value
}

func (v *NullableProductPricing) Set(val *ProductPricing) {
	v.value = val
	v.isSet = true
}

func (v NullableProductPricing) IsSet() bool {
	return v.isSet
}

func (v *NullableProductPricing) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProductPricing(val *ProductPricing) *NullableProductPricing {
	return &NullableProductPricing{value: val, isSet: true}
}

func (v NullableProductPricing) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProductPricing) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


