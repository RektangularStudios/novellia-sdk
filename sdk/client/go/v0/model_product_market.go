/*
 * novellia
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.8.0
 * Contact: contact@rektangularstudios.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package novellia

import (
	"encoding/json"
)

// ProductMarket struct for ProductMarket
type ProductMarket struct {
	Name string `json:"name"`
	MarketId string `json:"market_id"`
	// Market description. This can be markdown.
	Description string `json:"description"`
}

// NewProductMarket instantiates a new ProductMarket object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProductMarket(name string, marketId string, description string, ) *ProductMarket {
	this := ProductMarket{}
	this.Name = name
	this.MarketId = marketId
	this.Description = description
	return &this
}

// NewProductMarketWithDefaults instantiates a new ProductMarket object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProductMarketWithDefaults() *ProductMarket {
	this := ProductMarket{}
	return &this
}

// GetName returns the Name field value
func (o *ProductMarket) GetName() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ProductMarket) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ProductMarket) SetName(v string) {
	o.Name = v
}

// GetMarketId returns the MarketId field value
func (o *ProductMarket) GetMarketId() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.MarketId
}

// GetMarketIdOk returns a tuple with the MarketId field value
// and a boolean to check if the value has been set.
func (o *ProductMarket) GetMarketIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.MarketId, true
}

// SetMarketId sets field value
func (o *ProductMarket) SetMarketId(v string) {
	o.MarketId = v
}

// GetDescription returns the Description field value
func (o *ProductMarket) GetDescription() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *ProductMarket) GetDescriptionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *ProductMarket) SetDescription(v string) {
	o.Description = v
}

func (o ProductMarket) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["market_id"] = o.MarketId
	}
	if true {
		toSerialize["description"] = o.Description
	}
	return json.Marshal(toSerialize)
}

type NullableProductMarket struct {
	value *ProductMarket
	isSet bool
}

func (v NullableProductMarket) Get() *ProductMarket {
	return v.value
}

func (v *NullableProductMarket) Set(val *ProductMarket) {
	v.value = val
	v.isSet = true
}

func (v NullableProductMarket) IsSet() bool {
	return v.isSet
}

func (v *NullableProductMarket) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProductMarket(val *ProductMarket) *NullableProductMarket {
	return &NullableProductMarket{value: val, isSet: true}
}

func (v NullableProductMarket) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProductMarket) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


