/*
 * novellia
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.8.0
 * Contact: contact@rektangularstudios.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package novellia

import (
	"encoding/json"
)

// ProductsList Light-weight list of products for further querying
type ProductsList struct {
	// List of available products
	ProductId []string `json:"product_id"`
}

// NewProductsList instantiates a new ProductsList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProductsList(productId []string, ) *ProductsList {
	this := ProductsList{}
	this.ProductId = productId
	return &this
}

// NewProductsListWithDefaults instantiates a new ProductsList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProductsListWithDefaults() *ProductsList {
	this := ProductsList{}
	return &this
}

// GetProductId returns the ProductId field value
func (o *ProductsList) GetProductId() []string {
	if o == nil  {
		var ret []string
		return ret
	}

	return o.ProductId
}

// GetProductIdOk returns a tuple with the ProductId field value
// and a boolean to check if the value has been set.
func (o *ProductsList) GetProductIdOk() (*[]string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ProductId, true
}

// SetProductId sets field value
func (o *ProductsList) SetProductId(v []string) {
	o.ProductId = v
}

func (o ProductsList) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["product_id"] = o.ProductId
	}
	return json.Marshal(toSerialize)
}

type NullableProductsList struct {
	value *ProductsList
	isSet bool
}

func (v NullableProductsList) Get() *ProductsList {
	return v.value
}

func (v *NullableProductsList) Set(val *ProductsList) {
	v.value = val
	v.isSet = true
}

func (v NullableProductsList) IsSet() bool {
	return v.isSet
}

func (v *NullableProductsList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProductsList(val *ProductsList) *NullableProductsList {
	return &NullableProductsList{value: val, isSet: true}
}

func (v NullableProductsList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProductsList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


