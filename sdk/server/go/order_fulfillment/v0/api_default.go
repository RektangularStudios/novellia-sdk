/*
 * order-fulfillment
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.2.0
 * Contact: contact@rektangularstudios.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package order_fulfillment

import (
	"encoding/json"
	"net/http"
	"strings"
)

// A DefaultApiController binds http requests to an api service and writes the service results to the http response
type DefaultApiController struct {
	service DefaultApiServicer
}

// NewDefaultApiController creates a default api controller
func NewDefaultApiController(s DefaultApiServicer) Router {
	return &DefaultApiController{ service: s }
}

// Routes returns all of the api route for the DefaultApiController
func (c *DefaultApiController) Routes() Routes {
	return Routes{ 
		{
			"GetOrders",
			strings.ToUpper("Get"),
			"/order-fulfillment/orders",
			c.GetOrders,
		},
		{
			"GetStatus",
			strings.ToUpper("Get"),
			"/order-fulfillment/status",
			c.GetStatus,
		},
		{
			"PostOrders",
			strings.ToUpper("Post"),
			"/order-fulfillment/orders",
			c.PostOrders,
		},
	}
}

// GetOrders - Your GET endpoint
func (c *DefaultApiController) GetOrders(w http.ResponseWriter, r *http.Request) { 
	query := r.URL.Query()
	orderId := query.Get("order_id")
	result, err := c.service.GetOrders(r.Context(), orderId)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
	
}

// GetStatus - Your GET endpoint
func (c *DefaultApiController) GetStatus(w http.ResponseWriter, r *http.Request) { 
	result, err := c.service.GetStatus(r.Context())
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
	
}

// PostOrders - 
func (c *DefaultApiController) PostOrders(w http.ResponseWriter, r *http.Request) { 
	order := &Order{}
	if err := json.NewDecoder(r.Body).Decode(&order); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	
	result, err := c.service.PostOrders(r.Context(), *order)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
	
}
