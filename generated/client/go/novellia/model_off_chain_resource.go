/*
 * novellia
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.8.0
 * Contact: contact@rektangularstudios.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package novellia

import (
	"encoding/json"
)

// OffChainResource Off-chain resource used in Novellia Token Standard
type OffChainResource struct {
	// Resource identifier interpreted by application. These may correspond to specific names resources a client expects.
	ResourceId string `json:"resource_id"`
	// Short text describing resource. Helpful to know what the resource should have been if the resource breaks.
	Description string `json:"description"`
	// Order to load resource. Lower numbers load first. Resources with the same name will progressively overwrite each other.
	Priority int32 `json:"priority"`
	// The multihash of the resource. In most cases, this may be identical to an IPFS hash.
	Multihash string `json:"multihash"`
	// Hint regarding file state prior to hashing (ipfs, direct)
	HashSourceType string `json:"hash_source_type"`
	// Redundant resource URLs. These should all point to the same file on different hosts.
	Url []string `json:"url"`
	// MIME type of resource.
	ContentType string `json:"content_type"`
}

// NewOffChainResource instantiates a new OffChainResource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOffChainResource(resourceId string, description string, priority int32, multihash string, hashSourceType string, url []string, contentType string, ) *OffChainResource {
	this := OffChainResource{}
	this.ResourceId = resourceId
	this.Description = description
	this.Priority = priority
	this.Multihash = multihash
	this.HashSourceType = hashSourceType
	this.Url = url
	this.ContentType = contentType
	return &this
}

// NewOffChainResourceWithDefaults instantiates a new OffChainResource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOffChainResourceWithDefaults() *OffChainResource {
	this := OffChainResource{}
	return &this
}

// GetResourceId returns the ResourceId field value
func (o *OffChainResource) GetResourceId() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.ResourceId
}

// GetResourceIdOk returns a tuple with the ResourceId field value
// and a boolean to check if the value has been set.
func (o *OffChainResource) GetResourceIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ResourceId, true
}

// SetResourceId sets field value
func (o *OffChainResource) SetResourceId(v string) {
	o.ResourceId = v
}

// GetDescription returns the Description field value
func (o *OffChainResource) GetDescription() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *OffChainResource) GetDescriptionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *OffChainResource) SetDescription(v string) {
	o.Description = v
}

// GetPriority returns the Priority field value
func (o *OffChainResource) GetPriority() int32 {
	if o == nil  {
		var ret int32
		return ret
	}

	return o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value
// and a boolean to check if the value has been set.
func (o *OffChainResource) GetPriorityOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Priority, true
}

// SetPriority sets field value
func (o *OffChainResource) SetPriority(v int32) {
	o.Priority = v
}

// GetMultihash returns the Multihash field value
func (o *OffChainResource) GetMultihash() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Multihash
}

// GetMultihashOk returns a tuple with the Multihash field value
// and a boolean to check if the value has been set.
func (o *OffChainResource) GetMultihashOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Multihash, true
}

// SetMultihash sets field value
func (o *OffChainResource) SetMultihash(v string) {
	o.Multihash = v
}

// GetHashSourceType returns the HashSourceType field value
func (o *OffChainResource) GetHashSourceType() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.HashSourceType
}

// GetHashSourceTypeOk returns a tuple with the HashSourceType field value
// and a boolean to check if the value has been set.
func (o *OffChainResource) GetHashSourceTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.HashSourceType, true
}

// SetHashSourceType sets field value
func (o *OffChainResource) SetHashSourceType(v string) {
	o.HashSourceType = v
}

// GetUrl returns the Url field value
func (o *OffChainResource) GetUrl() []string {
	if o == nil  {
		var ret []string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *OffChainResource) GetUrlOk() (*[]string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *OffChainResource) SetUrl(v []string) {
	o.Url = v
}

// GetContentType returns the ContentType field value
func (o *OffChainResource) GetContentType() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.ContentType
}

// GetContentTypeOk returns a tuple with the ContentType field value
// and a boolean to check if the value has been set.
func (o *OffChainResource) GetContentTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ContentType, true
}

// SetContentType sets field value
func (o *OffChainResource) SetContentType(v string) {
	o.ContentType = v
}

func (o OffChainResource) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["resource_id"] = o.ResourceId
	}
	if true {
		toSerialize["description"] = o.Description
	}
	if true {
		toSerialize["priority"] = o.Priority
	}
	if true {
		toSerialize["multihash"] = o.Multihash
	}
	if true {
		toSerialize["hash_source_type"] = o.HashSourceType
	}
	if true {
		toSerialize["url"] = o.Url
	}
	if true {
		toSerialize["content_type"] = o.ContentType
	}
	return json.Marshal(toSerialize)
}

type NullableOffChainResource struct {
	value *OffChainResource
	isSet bool
}

func (v NullableOffChainResource) Get() *OffChainResource {
	return v.value
}

func (v *NullableOffChainResource) Set(val *OffChainResource) {
	v.value = val
	v.isSet = true
}

func (v NullableOffChainResource) IsSet() bool {
	return v.isSet
}

func (v *NullableOffChainResource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOffChainResource(val *OffChainResource) *NullableOffChainResource {
	return &NullableOffChainResource{value: val, isSet: true}
}

func (v NullableOffChainResource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOffChainResource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


