/*
 * novellia
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.8.0
 * Contact: contact@rektangularstudios.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package novellia

import (
	"encoding/json"
)

// ProductStock struct for ProductStock
type ProductStock struct {
	Available float32 `json:"available"`
	TotalSupply float32 `json:"total_supply"`
}

// NewProductStock instantiates a new ProductStock object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProductStock(available float32, totalSupply float32, ) *ProductStock {
	this := ProductStock{}
	this.Available = available
	this.TotalSupply = totalSupply
	return &this
}

// NewProductStockWithDefaults instantiates a new ProductStock object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProductStockWithDefaults() *ProductStock {
	this := ProductStock{}
	return &this
}

// GetAvailable returns the Available field value
func (o *ProductStock) GetAvailable() float32 {
	if o == nil  {
		var ret float32
		return ret
	}

	return o.Available
}

// GetAvailableOk returns a tuple with the Available field value
// and a boolean to check if the value has been set.
func (o *ProductStock) GetAvailableOk() (*float32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Available, true
}

// SetAvailable sets field value
func (o *ProductStock) SetAvailable(v float32) {
	o.Available = v
}

// GetTotalSupply returns the TotalSupply field value
func (o *ProductStock) GetTotalSupply() float32 {
	if o == nil  {
		var ret float32
		return ret
	}

	return o.TotalSupply
}

// GetTotalSupplyOk returns a tuple with the TotalSupply field value
// and a boolean to check if the value has been set.
func (o *ProductStock) GetTotalSupplyOk() (*float32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.TotalSupply, true
}

// SetTotalSupply sets field value
func (o *ProductStock) SetTotalSupply(v float32) {
	o.TotalSupply = v
}

func (o ProductStock) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["available"] = o.Available
	}
	if true {
		toSerialize["total_supply"] = o.TotalSupply
	}
	return json.Marshal(toSerialize)
}

type NullableProductStock struct {
	value *ProductStock
	isSet bool
}

func (v NullableProductStock) Get() *ProductStock {
	return v.value
}

func (v *NullableProductStock) Set(val *ProductStock) {
	v.value = val
	v.isSet = true
}

func (v NullableProductStock) IsSet() bool {
	return v.isSet
}

func (v *NullableProductStock) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProductStock(val *ProductStock) *NullableProductStock {
	return &NullableProductStock{value: val, isSet: true}
}

func (v NullableProductStock) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProductStock) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


