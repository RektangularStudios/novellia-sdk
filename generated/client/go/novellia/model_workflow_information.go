/*
 * novellia
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.8.0
 * Contact: contact@rektangularstudios.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package novellia

import (
	"encoding/json"
)

// WorkflowInformation Returns preconditions relevant to a user wanting to execute a workflow. I.e. costs.
type WorkflowInformation struct {
	// The lovelace cost to execute the workflow
	FeeLovelace *int32 `json:"fee_lovelace,omitempty"`
}

// NewWorkflowInformation instantiates a new WorkflowInformation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWorkflowInformation() *WorkflowInformation {
	this := WorkflowInformation{}
	return &this
}

// NewWorkflowInformationWithDefaults instantiates a new WorkflowInformation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWorkflowInformationWithDefaults() *WorkflowInformation {
	this := WorkflowInformation{}
	return &this
}

// GetFeeLovelace returns the FeeLovelace field value if set, zero value otherwise.
func (o *WorkflowInformation) GetFeeLovelace() int32 {
	if o == nil || o.FeeLovelace == nil {
		var ret int32
		return ret
	}
	return *o.FeeLovelace
}

// GetFeeLovelaceOk returns a tuple with the FeeLovelace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowInformation) GetFeeLovelaceOk() (*int32, bool) {
	if o == nil || o.FeeLovelace == nil {
		return nil, false
	}
	return o.FeeLovelace, true
}

// HasFeeLovelace returns a boolean if a field has been set.
func (o *WorkflowInformation) HasFeeLovelace() bool {
	if o != nil && o.FeeLovelace != nil {
		return true
	}

	return false
}

// SetFeeLovelace gets a reference to the given int32 and assigns it to the FeeLovelace field.
func (o *WorkflowInformation) SetFeeLovelace(v int32) {
	o.FeeLovelace = &v
}

func (o WorkflowInformation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FeeLovelace != nil {
		toSerialize["fee_lovelace"] = o.FeeLovelace
	}
	return json.Marshal(toSerialize)
}

type NullableWorkflowInformation struct {
	value *WorkflowInformation
	isSet bool
}

func (v NullableWorkflowInformation) Get() *WorkflowInformation {
	return v.value
}

func (v *NullableWorkflowInformation) Set(val *WorkflowInformation) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkflowInformation) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkflowInformation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkflowInformation(val *WorkflowInformation) *NullableWorkflowInformation {
	return &NullableWorkflowInformation{value: val, isSet: true}
}

func (v NullableWorkflowInformation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkflowInformation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


