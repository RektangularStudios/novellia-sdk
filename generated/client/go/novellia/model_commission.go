/*
 * novellia
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.8.0
 * Contact: contact@rektangularstudios.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package novellia

import (
	"encoding/json"
)

// Commission A recommended commission for clients that will abide by it
type Commission struct {
	// Name of entity taking commissions
	Name string `json:"name"`
	// Address to deposit commissions
	Address string `json:"address"`
	// Recommended commission percentage
	Percent *float32 `json:"percent,omitempty"`
}

// NewCommission instantiates a new Commission object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommission(name string, address string, ) *Commission {
	this := Commission{}
	this.Name = name
	this.Address = address
	return &this
}

// NewCommissionWithDefaults instantiates a new Commission object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommissionWithDefaults() *Commission {
	this := Commission{}
	return &this
}

// GetName returns the Name field value
func (o *Commission) GetName() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Commission) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Commission) SetName(v string) {
	o.Name = v
}

// GetAddress returns the Address field value
func (o *Commission) GetAddress() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *Commission) GetAddressOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *Commission) SetAddress(v string) {
	o.Address = v
}

// GetPercent returns the Percent field value if set, zero value otherwise.
func (o *Commission) GetPercent() float32 {
	if o == nil || o.Percent == nil {
		var ret float32
		return ret
	}
	return *o.Percent
}

// GetPercentOk returns a tuple with the Percent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Commission) GetPercentOk() (*float32, bool) {
	if o == nil || o.Percent == nil {
		return nil, false
	}
	return o.Percent, true
}

// HasPercent returns a boolean if a field has been set.
func (o *Commission) HasPercent() bool {
	if o != nil && o.Percent != nil {
		return true
	}

	return false
}

// SetPercent gets a reference to the given float32 and assigns it to the Percent field.
func (o *Commission) SetPercent(v float32) {
	o.Percent = &v
}

func (o Commission) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["address"] = o.Address
	}
	if o.Percent != nil {
		toSerialize["percent"] = o.Percent
	}
	return json.Marshal(toSerialize)
}

type NullableCommission struct {
	value *Commission
	isSet bool
}

func (v NullableCommission) Get() *Commission {
	return v.value
}

func (v *NullableCommission) Set(val *Commission) {
	v.value = val
	v.isSet = true
}

func (v NullableCommission) IsSet() bool {
	return v.isSet
}

func (v *NullableCommission) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommission(val *Commission) *NullableCommission {
	return &NullableCommission{value: val, isSet: true}
}

func (v NullableCommission) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommission) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


