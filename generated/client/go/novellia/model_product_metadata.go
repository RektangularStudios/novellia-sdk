/*
 * novellia
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.8.0
 * Contact: contact@rektangularstudios.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package novellia

import (
	"encoding/json"
)

// ProductMetadata struct for ProductMetadata
type ProductMetadata struct {
	DateListed string `json:"date_listed"`
	DateAvailable string `json:"date_available"`
}

// NewProductMetadata instantiates a new ProductMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProductMetadata(dateListed string, dateAvailable string, ) *ProductMetadata {
	this := ProductMetadata{}
	this.DateListed = dateListed
	this.DateAvailable = dateAvailable
	return &this
}

// NewProductMetadataWithDefaults instantiates a new ProductMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProductMetadataWithDefaults() *ProductMetadata {
	this := ProductMetadata{}
	return &this
}

// GetDateListed returns the DateListed field value
func (o *ProductMetadata) GetDateListed() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.DateListed
}

// GetDateListedOk returns a tuple with the DateListed field value
// and a boolean to check if the value has been set.
func (o *ProductMetadata) GetDateListedOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.DateListed, true
}

// SetDateListed sets field value
func (o *ProductMetadata) SetDateListed(v string) {
	o.DateListed = v
}

// GetDateAvailable returns the DateAvailable field value
func (o *ProductMetadata) GetDateAvailable() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.DateAvailable
}

// GetDateAvailableOk returns a tuple with the DateAvailable field value
// and a boolean to check if the value has been set.
func (o *ProductMetadata) GetDateAvailableOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.DateAvailable, true
}

// SetDateAvailable sets field value
func (o *ProductMetadata) SetDateAvailable(v string) {
	o.DateAvailable = v
}

func (o ProductMetadata) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["date_listed"] = o.DateListed
	}
	if true {
		toSerialize["date_available"] = o.DateAvailable
	}
	return json.Marshal(toSerialize)
}

type NullableProductMetadata struct {
	value *ProductMetadata
	isSet bool
}

func (v NullableProductMetadata) Get() *ProductMetadata {
	return v.value
}

func (v *NullableProductMetadata) Set(val *ProductMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableProductMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableProductMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProductMetadata(val *ProductMetadata) *NullableProductMetadata {
	return &NullableProductMetadata{value: val, isSet: true}
}

func (v NullableProductMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProductMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


