openapi: 3.0.0
info:
  title: novellia-api
  version: '1.0'
  license:
    url: 'https://raw.githubusercontent.com/RektangularStudios/novellia-sdk/main/LICENSE'
    name: MIT
  contact:
    email: contact@rektangularstudios.com
    url: 'https://rektangularstudios.com'
    name: Rektangular Studios
  termsOfService: TODO
servers:
  - url: 'http://localhost:3555'
paths:
  '/wallet/{wallet_address}':
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                description: List of tokens held by Cardano wallet
                items:
                  $ref: '#/components/schemas/Token'
        '400':
          description: Bad Request
      operationId: get-wallet
      description: Returns the tokens held in a wallet address
    parameters:
      - schema:
          type: string
        name: wallet_address
        in: path
        required: true
        description: Address of Cardano wallet to use
  /workflow/minter/nvla:
    post:
      summary: ''
      operationId: post-workflow-minter-nvla
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardanoTransaction'
        '400':
          description: Bad Request
      description: Returns a transaction to mint NVLA and deposit it to a specified address
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MinterInfo'
    get:
      summary: ''
      operationId: get-workflow-minter-nvla
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowInformation'
          headers: {}
      description: Returns execution information such as transaction cost
  /cardano/transaction:
    post:
      summary: ''
      operationId: post-cardano-transaction
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
      description: Submits a transaction to Cardano
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardanoTransaction'
        description: ''
    parameters: []
  /cardano/status:
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardanoStatus'
        '500':
          description: Internal Server Error
      operationId: get-cardano-status
      description: Information regarding availability of Cardano APIs
  /cardano/tip:
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardanoTip'
      operationId: get-cardano-tip
      description: Returns Cardano's latest block and epoch
  /status:
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      operationId: get-status
      description: Information regarding availability of Novellia APIs
  /products:
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
      operationId: get-products
      parameters:
        - schema:
            type: string
          in: query
          name: market
          description: Filter product results by market
        - schema:
            type: string
          in: query
          name: organization
          description: Filter product results by organization
      description: Returns a list of products to display
    parameters: []
components:
  schemas:
    Token:
      title: Token
      type: object
      description: Generalizes the data required to describe a token in a Cardano wallet.
      properties:
        asset_id:
          type: string
          description: Token asset ID registered on Cardano
        amount:
          description: 'Amount of token held in Cardano wallet (in discrete units, i.e. lovelace)'
          type: integer
        name:
          type: string
          description: 'Name or ticker as interpreted by Novellia (e.g. NVLA, ADA)'
        description:
          type: string
          description: Short description of token as interpreted by Novellia
      required:
        - asset_id
        - amount
    CardanoTransaction:
      title: CardanoTransaction
      type: object
      description: A Cardano transaction to be signed and submitted.
      properties:
        transaction:
          type: string
          description: text of transaction file
        fee_lovelace:
          type: integer
          description: 'Cost to submit TX in lovelace (1 ADA = 1,000,000 lovelace)'
        signed:
          type: boolean
          description: Indicates if the transaction is signed or raw
      required:
        - transaction
        - fee_lovelace
        - signed
    MinterInfo:
      title: MinterInfo
      type: object
      description: Generic information required for minter workflows.
      properties:
        wallet_address:
          type: string
          description: Wallet that pays transaction fee
        minter_deposit_address:
          type: string
          description: Wallet that received minted tokens
      required:
        - wallet_address
        - minter_deposit_address
    WorkflowInformation:
      title: WorkflowInformation
      type: object
      description: Returns preconditions relevant to a user wanting to execute a workflow. I.e. costs.
      properties:
        fee_lovelace:
          type: integer
          description: The lovelace cost to execute the workflow
    CardanoTip:
      title: CardanoTip
      type: object
      description: Cardano chain tip information
      properties:
        block:
          description: Latest Cardano block
          type: integer
        epoch:
          type: integer
          description: Latest Cardano epoch
      required:
        - block
        - epoch
    Status:
      title: Status
      type: object
      description: 'Status of Novellia microservice, indicating service availabilities'
      properties:
        cardano:
          type: object
          required:
            - initialized
            - sync_percentage
          properties:
            initialized:
              type: boolean
              description: whether cardano-graphql is initialized
            sync_percentage:
              type: number
              description: 'cardano-graphql sync percentage, used to gauge when APIs will be available'
        maintenance:
          type: boolean
          description: kill-switch to tell users that the backend is not working correctly / is under maintenance
      required:
        - cardano
        - maintenance
    Product:
      title: Product
      type: object
      description: A product to display for sale
      properties:
        name:
          type: string
          description: Name of product to display
        metadata:
          type: object
          required:
            - market
            - organization
          description: Metadata for filtering and sorting product
          properties:
            market:
              type: string
              description: 'Market to list product under (e.g. Games, NFTs)'
            organization:
              type: string
              description: Organization product is listed under (e.g. Rektangular)
        assets:
          type: object
          required:
            - urls
            - loader
          description: Resources for detailed view asset
          properties:
            urls:
              type: array
              description: URLs pointing to detailed asset for detailed view. Each link should point to the same file.
              items:
                type: string
            loader:
              type: string
              description: Asset loader for linked assets file
        image_urls:
          type: array
          description: URLs pointing to image to display on product overview. Each link should point to the same file.
          items:
            type: string
      required:
        - name
        - metadata
        - assets
        - image_urls
